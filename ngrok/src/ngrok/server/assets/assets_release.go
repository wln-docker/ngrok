// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\xc9\x0e\xaa\xc0\x12\x86\xf7\x3c\xc5\xdd\x9b\x1b\x90\x51\x96\x4d\x33\xaa\xdd\x88\x4c\xe2\x0e\x90\x41\xa6\x06\x99\x84\xa7\xbf\x9e\xb3\xb8\x9b\x53\x49\x2d\xea\x4b\x2a\xf9\x2b\xa9\xef\xbf\x7f\x4a\xd1\x0c\x0b\xff\x07\x6a\x77\xcf\xd2\x2d\x08\x3c\xed\x2f\xa5\x90\x65\xc1\x4f\x05\x21\x78\x46\x10\x3a\xd0\x94\x1e\xbd\xeb\xd7\x42\xd4\x56\x00\x2b\x45\x3d\x94\xf5\xdb\x90\x57\x46\x01\x8e\xaf\x03\x15\x3c\xd1\x3d\x5d\x75\x27\x52\x03\xc7\x51\x55\xc0\x0f\xd4\xb5\xc5\xe4\x19\x0a\x5d\xf4\xeb\x6b\xf7\xea\x93\x0a\x64\xfa\xca\x7c\x71\xa5\x6d\xc8\xf3\x37\xa4\x5a\x1b\xf6\x9a\xf8\xc7\x76\xf4\xdb\x40\x95\xf3\x7f\x86\x94\xfa\x4b\xe9\x3b\x08\x94\x02\x07\x0a\x40\x48\x7d\x93\x39\x62\xcb\x26\x69\x5f\x65\xd2\xa6\xf3\x8b\x6d\xe6\x5f\x42\xc5\xfa\x27\x8d\xa6\x03\x60\x43\xe0\x9c\xc0\x9f\x13\x14\x58\x5c\x7e\x83\x06\x96\xf1\x6b\x48\x79\x78\xd7\x18\x9a\xc0\xf1\xcb\x7a\x4b\xb4\xb4\xe4\xe9\x4e\x81\x66\xae\x97\xf7\x3e\xd4\x9f\xf3\x12\x73\x5c\x48\x17\xd5\x30\x8f\x8e\xc8\x1e\x39\xaa\x3b\xc6\x55\xd3\xeb\x2a\xd1\x09\x04\x5c\xcb\x61\xad\xad\xbe\xd7\x0c\xf0\x40\x76\xa4\x5e\x7b\xec\x1e\x8a\x6b\xb9\x28\xc1\x72\xaa\xcf\x56\x50\x1e\xb7\xdc\xdb\x84\x7d\x58\xce\x3b\xeb\x7f\xc3\x33\x65\x9a\xcd\xe4\xf3\x6d\x07\xc2\xfc\xc1\x5d\xf2\x4c\xaf\xf2\x93\xea\xcd\xe6\xbb\x6f\xd5\xb3\xb9\x10\x39\x39\xda\x4a\x59\x35\xb3\x7e\xcb\x66\x21\xdc\xbc\x6f\x3f\xb6\x3e\x4d\xb0\x5a\x10\xad\x0a\x11\xa5\xe8\xe2\xec\x4b\x79\xdc\xa5\x91\xb9\x46\x11\xce\x71\x65\x48\x78\xc2\x31\xc9\xbb\x4b\xc6\x79\xdf\xaf\x99\x92\x24\x50\x4b\x16\x63\xb1\xba\x91\x7a\xae\xbd\x72\x74\x9a\x76\x30\xb6\xce\x96\x58\x4a\x6e\x7a\xba\x98\xa3\xe0\xa4\x18\xef\x90\xb9\x32\x68\x49\xd8\x6a\x14\x07\x74\xd0\x45\x79\xda\xde\x16\x7d\xe9\x8c\xde\xf5\x56\x94\x27\x53\xa6\x98\x2e\xe3\x7d\xde\xfc\x8e\x5d\x9b\xe1\x46\x3e\x16\xa8\xdb\x46\xbf\xc6\xf1\x25\xf8\xd6\x12\xd2\x62\x4c\xf6\xa4\x3e\xed\x87\x42\x08\xf4\xf7\x78\x0e\xbd\x67\xb5\x5a\x2a\x70\x80\x82\x00\x63\x40\x77\x30\x5c\x2b\xe1\x54\x47\x53\x14\xc7\x07\x80\xb7\x14\x0a\x38\xb0\x1b\x84\x99\xdd\x87\xfb\xdb\x2c\x58\x61\xd8\x1a\xf1\x2e\x65\x69\xd0\x89\x6a\x44\x4b\x85\x2b\x22\x31\x15\x19\x23\x49\x89\x5c\xf2\x9c\x0d\x3b\x2c\x4d\x22\x3f\x01\x19\xb3\xcb\x03\x7d\x28\xb3\xaf\xb9\x89\xa1\x6f\xf7\x60\x75\xce\x0a\x38\x0a\xc5\x67\x3d\xf7\x62\x20\xe6\xf6\xed\x55\x32\x58\xb2\x63\x38\xf4\x01\x28\xd9\xc2\x03\xfb\x58\x3e\x4f\xde\x55\x3d\x5a\x2f\xf2\xb9\x18\xf3\xc6\x27\x94\x42\xbf\x34\x32\xf4\x21\x3d\x58\x53\x9b\x25\xd9\xb3\x84\x06\x11\xea\x34\x7e\xc5\xb5\xee\xed\xb5\x00\x33\x93\x0b\x5d\xe3\x36\x44\x4b\x7d\xe7\x62\x5d\xbe\x0e\x40\x38\xe4\xa5\xb1\x39\xcf\x73\xd6\x53\xbf\xc7\x1f\xe5\x45\xb1\x5c\x48\x47\x5c\x95\x88\xc1\x0c\x0e\xba\x1f\xf0\xb2\xe8\xa2\xc3\xbd\x36\xab\x63\x9c\x0a\xe0\xf9\xf0\x4e\x45\x4e\xd8\x1a\xf1\x8b\xbd\x71\xa7\x74\x86\xcd\x60\xfb\x7a\x4f\xa8\x61\xa9\xf5\x57\x73\xe6\x92\xea\x71\x47\xab\x2d\x6b\x5b\x74\x34\x64\x31\x12\xe5\xe8\x44\x3f\xc9\x11\xf7\xef\x79\x3a\xf5\xfd\x94\xce\x79\x26\x35\x11\x9d\x7e\x3c\x6b\xea\xd3\x39\x19\x2d\xdf\x2d\x27\x2a\xb7\x05\x31\xb8\xe8\xd3\xe1\xd2\x4e\xa4\x74\x1e\xa3\xc8\x1c\x8c\x31\xd4\xa8\xbf\xb2\x6a\x58\xfd\x57\xe0\xff\x05\x00\x00\xff\xff\x27\xf7\xe6\x62\xdd\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 989, mode: os.FileMode(420), modTime: time.Unix(1482256472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xab\xda\x16\x45\x7b\xbe\xe2\xf4\xd6\x13\xd9\x40\xf1\x8a\x4d\xde\x06\x13\x0c\x26\x75\xe4\x6c\xc0\x64\xbe\xfe\xfa\x9e\xfa\xae\x76\x49\x53\x43\xa3\x98\xf3\x7f\xff\x1e\x2f\x29\xd0\xf8\xf3\x72\xc0\x1f\xeb\x05\x3d\xe0\x4a\x7f\x34\x29\xfc\xfb\x41\x9e\x10\x4a\xa3\x0d\x79\x00\x34\x01\xd8\x12\xd8\xe6\x43\x61\x0a\xff\x25\x61\xe8\x20\xcc\x07\xe1\x6e\xe1\xd6\x0f\x91\xb3\x78\x92\xba\x6b\xf5\x35\xb5\xdf\xc7\x16\x93\xa4\x8f\x96\xcd\xb4\xce\x36\x72\x27\x70\xf2\x83\xc7\x4d\x37\xca\xe2\x20\x0f\x02\x20\x7b\xd2\x90\xfa\xe6\xd0\x73\x40\x01\xce\x66\x46\x29\xb8\xdc\x67\xdc\x72\x65\x05\x36\xb6\x7d\x40\xaf\xc2\xcf\xc2\x3d\xe9\x6b\xda\x1e\x17\x81\xbc\x0f\xff\xa1\xaa\xdd\xf2\xa6\xfa\x0f\xf0\x8b\x80\xd4\x8a\x5c\x6e\x0a\x56\x74\x57\xb5\x1e\x7b\xf1\xa1\x6e\x03\x97\xe0\x26\x5f\x35\xdd\x2a\x5b\xf9\x4a\xfb\xa7\x7b\x8c\x73\xff\x46\x07\x43\x2c\x07\x44\x6a\xfc\x27\x2f\xdf\xd7\x37\x53\xc4\x9f\x34\x54\xf7\x30\x34\x0a\xa3\x51\x18\x63\x31\xe2\xa1\xf8\x68\x39\xe9\x1e\x87\x9a\x0e\x89\x27\x56\x84\x61\xdc\x1b\x6b\x68\xd7\xd6\xad\x66\xbb\xeb\x27\xe5\x44\x3e\x26\x43\x70\xdd\x88\x96\x6b\xe8\xb1\xbc\x52\xfb\x98\x8e\x3d\xb7\x84\x68\xe6\xfb\xf4\xbc\xc9\x77\x6e\x39\x6b\x88\x6a\x1f\x65\x74\xdc\xfd\x59\x24\x4b\xce\xab\x0e\xe6\x7e\x6b\xea\x32\x1c\x13\x23\x91\x99\x8a\x69\xeb\x44\xb3\x79\xce\xe8\x37\xdc\x7c\xf4\x1e\x0f\x57\xd2\xb2\xd7\xad\xa4\x3d\xb9\x9e\x1f\xbe\x1b\x35\x3b\x14\x81\x0d\x78\x30\xfc\x64\xdb\x02\xb9\x04\xd7\x4d\xae\x86\x8d\xe4\xc7\x13\xc9\xf1\xc2\xdf\xe9\xb2\x7f\x6f\x8b\xc8\x65\x59\xa1\xd0\x82\x53\xbe\xf6\x29\x93\xaf\x6c\x5f\xea\x96\xc5\x31\xfe\x59\xde\x2a\xa6\xdc\xc6\x07\xdb\xb9\x5d\x15\xf7\x56\xe9\x13\xd1\xb3\xa5\x88\x9c\x33\x91\x2b\x11\xf8\x48\x4e\xda\xe6\x0a\x2b\x56\x86\xc3\xf5\x21\x40\xa4\x79\x8a\xbd\xba\x19\xa8\x2d\x6d\xe0\xb8\x97\x21\xbd\xfb\x96\xda\x6f\xb5\xe3\x9f\xd1\x5c\xfe\x14\xc7\x90\x6a\xf4\xb2\x5d\x12\x1a\x11\x67\x4d\x22\x20\x04\xce\xb2\x25\xd1\xa1\x44\x2a\x53\xee\x5a\x71\x25\x67\x90\xbb\xae\xcd\xf7\xed\x6c\x6a\xe4\x2d\xba\x6a\x7a\x8a\x59\x02\x8a\xbe\x8d\xef\xa6\xc9\xae\x07\xfd\x61\x08\xb3\x64\x91\xe0\x8e\xbb\xeb\x4e\xac\x26\x26\x4c\x54\x47\xb2\xfd\xce\x04\xa9\x44\x32\x86\xf1\x74\x6d\x33\xdf\x7d\x29\xed\x58\x8a\xf3\xb4\x32\x78\x2c\xf1\xd9\x85\xc2\xe0\xd6\xc4\xd9\x99\x86\xc1\xb9\x3c\xdf\x20\xe9\xfe\x5d\x05\x35\x4a\x78\x42\xb5\x21\xf1\x6d\x37\xf3\xa6\x5c\x99\x6f\xd6\x42\xa0\xdf\x2c\xcf\x01\x2d\xf4\xfd\x4f\x58\x1f\xb7\xad\xb9\x92\x22\x96\x85\x71\xdc\x48\x97\xca\xbf\x46\xa1\xae\x68\x84\xdc\x21\xac\xdf\x37\xeb\x00\x83\xc2\x03\x93\xc4\xd7\x79\x9a\xea\x02\x1b\xcc\xb3\x14\x0c\xa6\x2b\x15\x93\x60\xb7\xab\xaf\x83\x29\x0d\x71\xf1\x7d\xd7\x2d\x3d\xf0\xe0\xab\x4c\x95\xaa\x4a\xba\x6a\x46\xf6\x35\x41\x19\xd6\x82\x5f\xa8\xe6\x82\x24\x4e\xfb\x65\x30\x71\x40\x1d\x0c\xc5\xac\x4c\xc7\xd1\x24\xa0\xce\xbc\x97\xe2\x06\xda\x1e\xe0\x37\xa6\x06\x3f\x2b\x15\xcd\x84\x8e\x00\x09\x09\x9f\x10\x7e\xcc\x31\x0f\x8d\x5d\x41\xed\x1a\x4a\xb6\xe3\x6e\x3e\x0a\x06\x03\xec\xbb\x8a\xf5\x56\x4a\xe8\x8e\xe0\xed\xdb\x3b\xad\x78\xd3\xba\x4d\x11\x09\xec\xbb\x66\x15\xa1\x26\xfe\x25\x7e\xe2\x22\x62\x79\x97\xc8\x52\x4a\x3c\x99\x55\x88\x7a\xcd\x2b\x10\xd0\x71\xfa\x3e\x85\x22\xfd\x7c\x86\x49\x6c\xf1\xfd\x6e\xcf\x84\x5a\x09\xd2\x5c\x69\x95\x7a\xa2\x6a\xa2\xb4\x51\xce\x4d\x42\x65\x81\xa7\x13\x20\xd9\x67\x1a\x8e\x2f\x65\x37\x54\x1f\x08\xd4\xc3\xcd\xfa\x54\x93\x1d\x8c\x7e\x3e\xfc\xec\x3c\x4b\x5a\x32\xf4\xcb\x03\x29\x7c\x8c\xa2\x6c\x28\x19\x3d\x5e\xb4\x7b\x39\x49\xb0\x14\x37\x79\x74\xee\xd6\x4f\x62\x54\x6a\x4a\x44\xba\xfa\xed\x15\xac\x76\xa0\x57\xa1\x29\x4a\x29\xf9\x24\xfb\x85\xcc\x39\xe2\xea\x9e\xf4\xf3\xc6\xca\x7f\x91\x1f\xf7\x54\x5a\x5f\x47\x94\xc6\x2e\xf4\x9e\xf1\x07\x43\x71\xa4\x7e\x96\x38\x53\xd8\x51\xeb\x98\xe3\x56\x09\x54\xe6\x2c\x73\x9a\xd2\x4a\x95\x46\x59\xb8\x69\x41\xc7\x07\x13\x27\x69\xd4\xf4\x58\xbe\x55\xcf\xf8\x97\x64\x2e\x19\xea\x80\xa6\x43\x5b\x17\x36\x15\xa2\x67\x59\xba\x82\x75\x8b\xc3\x42\x2a\xef\x58\xa3\xcb\x13\x24\xae\xaa\x55\xa7\xd1\x65\x54\x09\xb7\x63\x62\xfd\x42\xd6\x95\x85\x6d\x49\x63\xc8\xb5\x8b\x3d\x82\xf4\x62\x1f\x37\xd6\x53\xa2\xa4\x43\x7c\xb8\xa1\xcd\xab\xfa\xa8\x0b\xdd\xc5\xbe\x11\xac\x1b\x0e\x2f\xff\x52\x7f\xc8\x20\x6f\x28\x4b\xc7\xc8\x6f\xff\x0e\x28\x37\xcb\xab\x3e\x57\x3a\x1f\x5b\xc8\x9d\x02\x77\x2f\x7e\x88\x73\x33\xfa\x08\xeb\xdf\xb6\xe3\x75\xe1\x75\xd0\xc0\x13\xb3\xc0\x70\xda\x02\xee\x2a\x94\x94\x74\xdf\x47\xdc\xf5\x25\x18\xd0\xbd\xf1\xd7\xb1\x3e\x30\x47\x5c\xc2\xba\x6f\xf6\xeb\xbe\x71\xb5\x8b\xe5\x6a\x5f\x19\x08\xf5\xb5\x5c\xff\xe5\x30\xed\x0e\x50\x80\x37\x13\x7f\xd2\xb8\xed\x4c\xf7\xf7\x2a\x9a\x97\x35\x24\xf1\xb2\x66\x29\x57\xa7\xcb\xa0\xf6\x38\x66\x9b\xa7\x94\xd3\x85\x58\x66\x67\xb6\x42\x71\xd3\x53\xe4\x1d\x97\x7c\xcd\xb5\x42\x19\x4a\xa0\xf5\x93\x5b\xa0\x61\xd4\xab\x8a\xed\x63\x30\x65\x31\x95\x4e\x9f\x7b\x84\xe9\x18\xfe\xe2\xbb\x68\x89\x71\x67\x19\xf5\xfa\x2a\x08\x0e\x3d\x18\x54\xdc\xa0\x8a\x4c\xef\x6f\xed\x61\xd0\x5d\x31\x43\xe6\x36\xfd\xf0\xb1\x34\x02\x7b\x74\x67\xe4\x33\x4a\x88\x24\x8b\x87\x60\x28\xf4\x1d\xcd\xdc\x39\xe0\x38\x2f\xe3\x56\xbd\x80\x84\x67\x46\x53\x5f\xd2\xaa\x7e\x21\xbf\x36\xfd\xbe\x2d\x95\x22\x51\x01\xbd\xaf\xdd\x60\x35\x1b\x7e\xc0\x0a\xbe\x72\xaa\xf5\x57\xa2\xf8\xf5\xa3\x93\xbf\x39\x7f\xdf\x4f\xdf\x6c\xc3\xac\x22\xab\x74\xec\xdf\xff\x47\xfe\xce\x8a\x64\x88\xff\x3d\x37\xff\x04\x00\x00\xff\xff\x70\x16\x16\x21\x8f\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1482256472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

